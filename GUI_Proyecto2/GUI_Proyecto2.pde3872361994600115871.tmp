/**
*  Serial communication
**/
// Se importa la libreria para la comunicacion serial con el puerto USART
import processing.serial.*;
Serial myPort;
// Bloque de variables a utilizar 
int out_data = -1;
int in_data = -1;
// Variables para la parte gráfica
int rectX = 10;
int rectY = 50;
int rectSize = 70;
int rec1 = 180;
int rec2 = 180;
int rpta1, rpta2;
color rectColor11, rectColor12, rectColor13, rectColor14, rectColor15, rectColor16;
color rectColor1, color1, color2;
color rectHighlight, currentColor;
boolean rectOver1 = false;
boolean rectOver2 = false;
boolean rectOver3 = false;
boolean rectOver4 = false;
boolean rectOver5 = false;
boolean rectOver6 = false;
boolean active = false;
boolean garra = false;

void setup(){
  size(500,500);
  rectColor11 = color(150,20,20);
  rectColor12 = color(150,20,20);
  rectColor13 = color(150,20,20);
  rectColor14 = color(150,20,20);
  rectColor15 = color(150,20,20);
  rectColor16 = color(150,20,20);
  
  color1 = color(150,20,20);
  color2 = color(20,150,20);
  rectHighlight = color(51);
  currentColor = color(20,20,100);
  
  PFont myFont = createFont(PFont.list()[2], 14);
  textFont(myFont);
  
  printArray(Serial.list());
  String portName = Serial.list()[0];
  myPort = new Serial(this, portName, 2400);
}

void draw(){ 
  update(mouseX, mouseY);
  background(currentColor);
// Texto de mensaje del proyecto
  fill(255);
  PFont myFont = loadFont("ArialMT-48.vlw");
  textFont(myFont,17);
  text("CONTROL BRAZO MECANICO", 10, 20);
  text("PROYECTO 2 MICROCONTROLADORES", 10, 40);
  text("CONTROL BRAZO",90,115);
  text("CONTROL GARRA",340,115);
  text("CONTROL 1",150,390);
  text("CONTROL 2",330,390);
  text("1",100,180);
  text("2",100,270);
  text("3",100,360);
  text("4",100,450);
  text("Servo 1: ",140,440);
  text("Servo 2: ",140,470);
  PFont texto = loadFont("ArialMT-48.vlw");
  textFont(texto,20);
  text("Max de Leon - 13012",270,450);
  text("Ricardo Franco - 13261", 270,480);
// Creación de los botones con sus respectivos colores y medidas
  fill(rectColor11);
  stroke(255);
  rect(rectX, rectY, rectSize, rectSize);
  fill(rectColor12);
  stroke(255);
  rect(rectX, rectY+90, rectSize, rectSize);
  fill(rectColor13);
  stroke(255);
  rect(rectX, rectY+180, rectSize, rectSize);
  fill(rectColor14);
  stroke(255);
  rect(rectX, rectY+270, rectSize, rectSize);
  fill(rectColor15);
  stroke(255);
  rect(rectX, rectY+360, rectSize, rectSize);
  fill(rectColor16);
  stroke(255);
  rect(rectX+250, rectY, rectSize, rectSize);
// Barras de los sliders con sus respectivos cuadrados adentro para trabajar
  fill(rectColor1);
  stroke(255);
  rect(rectX+250, rectY, rectSize, rectSize);
  fill(rectColor1);
  stroke(255);
  rect(rectX+250, rectY, rectSize, rectSize);
  
  fill(rectColor1);
  stroke(255);
  rect(rectX+250, rectY, rectSize, rectSize);
  fill(rectColor1);
  stroke(255);
  rect(rectX+250, rectY, rectSize, rectSize);
}

void update(int x, int y) {
  if ( overRect(rectX, rectY, rectSize, rectSize) ) {
    rectOver1 = true;
    rectOver2 = false;
    rectOver3 = false;
    rectOver4 = false;
    rectOver5 = false;
    rectOver6 = false;
  }
  else if ( overRect(rectX, rectY+90, rectSize, rectSize) ) {
      rectOver2 = true;
      rectOver1 = false;
      rectOver3 = false;
      rectOver4 = false;
      rectOver5 = false;
      rectOver6 = false;
  } 
  else if ( overRect(rectX, rectY+180, rectSize, rectSize) ) {
    rectOver3 = true;
    rectOver2 = false;
    rectOver1 = false;
    rectOver4 = false;
    rectOver5 = false;
    rectOver6 = false;
  } 
  else if ( overRect(rectX, rectY+270, rectSize, rectSize) ) {
    rectOver4 = true;
    rectOver2 = false;
    rectOver3 = false;
    rectOver1 = false;
    rectOver5 = false;
    rectOver6 = false;
  } 
  else if ( overRect(rectX, rectY+360, rectSize, rectSize) ) {
    rectOver5 = true;
    rectOver2 = false;
    rectOver3 = false;
    rectOver4 = false;
    rectOver1 = false;
    rectOver6 = false;
  } 
  else if ( overRect(rectX+250, rectY, rectSize, rectSize) ) {
    rectOver6 = true;
    rectOver2 = false;
    rectOver3 = false;
    rectOver4 = false;
    rectOver5 = false;
    rectOver1 = false;
  } else {
    rectOver1 = rectOver2 = rectOver3 = rectOver4 = rectOver5 = rectOver6 = false;
  }
}

void mousePressed() {
  if (rectOver1) {
    if(active==false){
      active = true;
      rectColor11 = color2;
      rectColor12 = color1;
      rectColor13 = color1;
      rectColor14 = color1;
      rectColor15 = color1;
      myPort.write(5);
      println(5);
    }else{
      active = false;
      rectColor11 = color1;
      myPort.write(5);
      println(5);
    }
  }
  if(active == false){
    if(rectOver2){
    rectColor12 = color2;
    rectColor13 = color1;
    rectColor14 = color1;
    rectColor15 = color1;
    myPort.write(0);
  }
  if(rectOver3){
    rectColor12 = color1;
    rectColor13 = color2;
    rectColor14 = color1;
    rectColor15 = color1;
    myPort.write(1);
  }
  if(rectOver4){
    rectColor12 = color1;
    rectColor13 = color1;
    rectColor14 = color2;
    rectColor15 = color1;
    myPort.write(2);
  }
  if(rectOver5){
    rectColor12 = color1;
    rectColor13 = color1;
    rectColor14 = color1;
    rectColor15 = color2;
    myPort.write(3);
  }
  } else {
    if(rectOver6){
      if(garra == false){
        garra = true;
        rectColor16 = color2;
        myPort.write(4);
        println(4);
      }else{
        garra = false;
        rectColor16 = color1;
        myPort.write(4);
        println(4);
      }
    }  
  }
}

boolean overRect(int x, int y, int width, int height)  {
  if (mouseX >= x && mouseX <= x+width && 
      mouseY >= y && mouseY <= y+height) {
    return true;
  } else {
    return false;
  }
}

void serialEvent(Serial myPort){
 in_data = myPort.read(); 
}